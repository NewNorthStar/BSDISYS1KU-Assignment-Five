syntax = "proto3";
option go_package = "example.com/auction/grpc/proto";

// API available at a front-end providing node. Should have discovery capabilities. 
service AuctionFrontEnd {
    // Place a bid on the auction. Returns acknowledgement showing outcome of the bid.
    rpc PutBid(Bid) returns (Ack);  

    // Get the status of the auction. Returns acknowledgement showing the current auction state. 
    rpc GetAuctionStatus(Empty) returns (Ack);

    // Get details on the item up for auction. Returns lot message with details. 
    rpc GetLot(Empty) returns (Lot);

    // Discover front-end service nodes for keeping contact with the auction. Returns discovery of node IP addresses.
    rpc GetDiscovery(Empty) returns (Discovery);
}

// API at the back-end. Should have election, failover and replication capabilities. 
service Auction {
    // Forward a bid to the auction. Returns acknowledgement showing outcome of the bid.
    rpc PutBid(Bid) returns (Ack);  

    // Get the status of the auction. Returns acknowledgement showing the current auction state. 
    rpc GetAuctionStatus(Empty) returns (Ack);

    // Get details on the item up for auction. Returns lot message with details. 
    rpc GetLot(Empty) returns (Lot);
}

message Lot{
    int64 id = 1;
    string name = 2;
    int64 asking_price = 3;
    int64 starting_bid = 4;
    int64 current_bid = 5;
}

message Bid {
    int64 amount = 1;
    int64 bidder_id = 2;
}

enum StatusValue {
    FAULT = 0;
    ACCEPTED = 1;
    UNDERBID = 2;
    SOLD = 3;
    IN_PROGRESS = 4;
}

message Ack {
    int64 amount = 1;
    StatusValue result = 2;
    int64 bidder_id = 3;
}

message Discovery {
    repeated string ip_addresses = 1;
}

message Empty{}